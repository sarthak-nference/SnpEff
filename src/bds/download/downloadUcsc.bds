#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data fro UCSC
#
#-------------------------------------------------------------------------------

downloadUcscDir 	:= "$dirDownload/ucsc"
soe                := "hgdownload.soe.ucsc.edu"
urlUcscSoe         := "http://$soe/goldenPath"
ftpUcscSoe         := "ftp://$soe/goldenPath"
rsyncUcscSoe       := "rsync://$soe/goldenPath"


# Create UCSC config file
void createUcscConfigFile() {
	configFile := "$dirSnpEff/config/snpEff.UCSC.config"
	today := sys date +"%Y-%m-%d"
	string[] configLines
	for(string genome: getUcscDownloadedGenomes()) {
		configLines += "$genome\.genome : $genome"
		configLines += "$genome\.reference : $rsyncUcscSoe/$genome/bigZips"
		configLines += "$genome\.retrieval_date : $today"
	}
	buildConfigFromLines(configFile, configLines)
}

# Download a single genome from UCSC
void downloadUcscGenome(string genome) {
	println "Downloading UCSC: '$genome'"

	downloadUcscDir.mkdir()
	downloadUcscDir.chdir()

	# Download files
	downloadOk := "$downloadUcscDir/$genome/download.ok"
	if( downloadOk.exists() ) {
		println "\tDownload OK file '$downloadOk' exists. Skipping download"
	} else {
		downloadUcscGenomeRsync(genome)
		downloadOk.write("OK")	# Mark as all downloads OK
	}

	# Install files
	installdUcscGenome(genome)

	# Create config file
}

# Download all UCSC genomes
void downloadUcscGenomes() {
	println "Downloading UCSC: All genomes"

	doneFile := "$dirDownload/ucsc.done"
	if( doneFile.exists() ) {
		println "\tDone file '$doneFile' exists: nothing done"
		return
	}

	downloadUcscDir.mkdir()
	downloadUcscDir.chdir()

	# Download all files
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		downloadUcscGenomesRsync()
		downloadOk.write("OK")	# Mark as all downloads OK
	} else {
		println "\tDownload OK file '$downloadOk' exists: skipping dowonload"
	}

	# Install downloaded files
	installdUcscGenomes()

	# Create config file
	createUcscConfigFile()

	doneFile.write('OK')	# Mark as all downloaded and installed
}

# Download all UCSC genomes using rsync
void downloadUcscGenomesRsync() {
	println "Downloading UCSC (rsync)"

	sys rsync -av -P \
			\
			--exclude='*/*ensGene.gtf.gz' \
			--exclude='*/est.fa.gz' \
			--exclude='*/*hardmasked.fa.gz' \
			--exclude='*/*RefMrna.fa.gz' \
			--exclude='*/*softmasked*.fa.gz' \
			--exclude='*/statistics' \
			--exclude='*/upstream*.fa.gz' \
			--exclude='*/xenoMrna.fa.gz' \
			\
			--include='*/bigZips/*.fa.gz' \
			--include='*/bigZips/refMrna.fa.gz' \
			--include='*/bigZips/genes/*.refGene.gtf.gz' \
			--include='*/bigZips/genes/*.knownGene.gtf.gz' \
			--include='*/database/cytoBand.txt.gz' \
			--include='*/' \
			\
			--exclude='*' \
			$rsyncUcscSoe \
			.
		
}

# Download a single genome from UCSC using rsync
void downloadUcscGenomeRsync(string genome) {
	println "Downloading UCSC (rsync): '$genome'"

	sys rsync -av -P \
			--exclude='*/*ensGene.gtf.gz' \
			--exclude='*/est.fa.gz' \
			--exclude='*/*hardmasked.fa.gz' \
			--exclude='*/*RefMrna.fa.gz' \
			--exclude='*/*softmasked*.fa.gz' \
			--exclude='*/statistics' \
			--exclude='*/upstream*.fa.gz' \
			--exclude='*/xenoMrna.fa.gz' \
			\
			--include='$genome/bigZips/refMrna.fa.gz' \
			--include='$genome/bigZips/$genome\.fa.gz' \
			--include='$genome/bigZips/genes/*.refGene.gtf.gz' \
			--include='$genome/bigZips/genes/*.knownGene.gtf.gz' \
			--include='$genome/database/cytoBand.txt.gz' \
			--include='*/' \
			\
			--exclude='*' \
			$rsyncUcscSoe \
			.
		
}

# Get the names of all downloaded genomes.
# Only include the directories that have all FASTA and GTF files.
string[] getUcscDownloadedGenomes() {
	downloadUcscDir.chdir()
	string[] genomes
	for(string genome: downloadUcscDir.dir()) {
		dirIn := "$downloadUcscDir/$genome"
		genomeFasta := "$dirIn/bigZips/$genome\.fa.gz"
		gtf := "$dirIn/bigZips/genes/$genome\.refGene.gtf.gz"
		cdsFasta := "$dirIn/bigZips/refMrna.fa.gz"
		if( genomeFasta.exists() && gtf.exists() && cdsFasta.exists() ) {
			genomes += genome
		}
	}
	return genomes
}

# Install a single genome
void installdUcscGenome(string genome) {
	println("Installing UCSC genome: '$genome'")
	dirIn := "$downloadUcscDir/$genome"
	dirOut := "$dirData/$genome"

	dirOut.mkdir()

	# Copy genome FASTA file
	genomeFasta := "$dirData/genomes/$genome\.fa.gz"
	if( !genomeFasta.exists() ) {
		sys cp -vf $dirIn/bigZips/$genome\.fa.gz $genomeFasta
	}

	# Copy GTF file
	gtf := "$dirOut/genes.gtf.gz"
	if( !gtf.exists() ) {
		sys cp -vf $dirIn/bigZips/genes/$genome\.refGene.gtf.gz $gtf
	}

	# Copy CDS file
	cds := "$dirOut/cds.fa.gz"
	if( !cds.exists() ) {
		sys cp -vf $dirIn/bigZips/refMrna.fa.gz $cds
	}

	# Copy cytoband file
	cytobands := "$dirOut/cytoBand.txt.gz"
	cytobandsIn := "$dirIn/database/cytoBand.txt.gz"
	if( !cytobands.exists() && cytobandsIn.exists() ) {
		sys cp -vf $cytobandsIn $cytobands
	}
}

# Install ALL UCSC genomes
void installdUcscGenomes() {
	for(string genome: getUcscDownloadedGenomes()) {
		installdUcscGenome(genome)
	}
}
